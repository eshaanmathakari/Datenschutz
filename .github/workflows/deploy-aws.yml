name: Deploy to AWS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'
        type: choice
        options:
        - us-east-1
        - us-west-2
        - eu-west-1
        - ap-southeast-1
  release:
    types: [published]

env:
  AWS_REGION: ${{ github.event.inputs.region || 'us-east-1' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  ECS_CLUSTER: datenschutz-${{ github.event.inputs.environment || 'production' }}
  ECS_SERVICE: datenschutz-analyzer
  ECS_TASK_DEFINITION: datenschutz-task
  CONTAINER_NAME: datenschutz-analyzer

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Docker image
        docker build -t $ECR_REGISTRY/${{ env.ECS_SERVICE }}:$IMAGE_TAG .
        docker push $ECR_REGISTRY/${{ env.ECS_SERVICE }}:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/${{ env.ECS_SERVICE }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create ECS task definition
      id: task-def
      run: |
        cat > task-definition.json << EOF
        {
          "family": "${{ env.ECS_TASK_DEFINITION }}",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "512",
          "memory": "1024",
          "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole",
          "taskRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskRole",
          "containerDefinitions": [
            {
              "name": "${{ env.CONTAINER_NAME }}",
              "image": "${{ steps.build-image.outputs.image }}",
              "portMappings": [
                {
                  "containerPort": 4001,
                  "protocol": "tcp"
                }
              ],
              "essential": true,
              "environment": [
                {
                  "name": "PORT",
                  "value": "4001"
                },
                {
                  "name": "MODEL_BACKEND",
                  "value": "${{ secrets.MODEL_BACKEND }}"
                },
                {
                  "name": "LOG_RETENTION_DAYS",
                  "value": "30"
                }
              ],
              "secrets": [
                {
                  "name": "HF_MODEL",
                  "valueFrom": "arn:aws:secretsmanager:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:secret:datenschutz/hf-model"
                }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/datenschutz",
                  "awslogs-region": "${{ env.AWS_REGION }}",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "healthCheck": {
                "command": ["CMD-SHELL", "curl -f http://localhost:4001/health || exit 1"],
                "interval": 30,
                "timeout": 5,
                "retries": 3,
                "startPeriod": 60
              }
            }
          ]
        }
        EOF

    - name: Register ECS task definition
      id: register-task-def
      run: |
        aws ecs register-task-definition \
          --cli-input-json file://task-definition.json \
          --region ${{ env.AWS_REGION }}
        
        TASK_DEF_ARN=$(aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "task-definition-arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }} \
          --force-new-deployment \
          --region ${{ env.AWS_REGION }}

    - name: Wait for service stability
      run: |
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --region ${{ env.AWS_REGION }}

    - name: Get service URL
      id: service-url
      run: |
        # Get load balancer DNS name
        LB_DNS=$(aws elbv2 describe-load-balancers \
          --names datenschutz-${{ env.ENVIRONMENT }}-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        if [ "$LB_DNS" != "None" ]; then
          echo "service-url=http://$LB_DNS" >> $GITHUB_OUTPUT
          echo "Service deployed at: http://$LB_DNS"
        else
          echo "Load balancer not found. Check ECS service for task IPs."
        fi

    - name: Run deployment verification
      run: |
        sleep 60  # Wait for service to fully start
        
        # Get the service URL or task IP
        if [ -n "${{ steps.service-url.outputs.service-url }}" ]; then
          HEALTH_URL="${{ steps.service-url.outputs.service-url }}/health"
        else
          # Fallback: get task IP
          TASK_ARN=$(aws ecs list-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --query 'taskArns[0]' \
            --output text \
            --region ${{ env.AWS_REGION }})
          
          TASK_IP=$(aws ecs describe-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --tasks $TASK_ARN \
            --query 'tasks[0].attachments[0].details[?name==`privateIPv4Address`].value' \
            --output text \
            --region ${{ env.AWS_REGION }})
          
          HEALTH_URL="http://$TASK_IP:4001/health"
        fi
        
        echo "Testing health endpoint: $HEALTH_URL"
        
        # Test health endpoint with retries
        for i in {1..10}; do
          if curl -f "$HEALTH_URL"; then
            echo "✅ Deployment verification successful!"
            exit 0
          fi
          echo "Attempt $i failed, retrying in 30 seconds..."
          sleep 30
        done
        
        echo "❌ Deployment verification failed"
        exit 1

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Successfully deployed to AWS ${{ env.ENVIRONMENT }} environment!"
        
    - name: Notify failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ AWS deployment failed. Check the logs for details."
