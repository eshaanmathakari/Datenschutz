name: "CodeQL Security Scanning"

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '30 2 * * 1'  # Weekly on Monday at 2:30 AM UTC

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    timeout-minutes: 360
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Set up Python 3.11
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        python -m pip install --upgrade pip
        pip install -r analyzer/requirements.txt

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  bandit:
    name: Bandit Python Security Scan
    runs-on: ubuntu-latest
    if: contains(github.event.repository.language, 'Python') || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety
        
    - name: Run Bandit Security Scan
      run: |
        bandit -r analyzer/ -f json -o bandit-report.json || true
        bandit -r analyzer/ -f txt
        
    - name: Check for known security vulnerabilities in dependencies
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Upload Bandit results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: bandit-report.json
      continue-on-error: true

  eslint:
    name: ESLint Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install ESLint and security plugins
      run: |
        npm init -y
        npm install --save-dev eslint @eslint/js eslint-plugin-security eslint-plugin-no-secrets
        
    - name: Create ESLint config
      run: |
        cat > .eslintrc.js << 'EOF'
        module.exports = {
          env: {
            browser: true,
            es2021: true,
            node: true
          },
          extends: [
            'eslint:recommended'
          ],
          plugins: [
            'security',
            'no-secrets'
          ],
          rules: {
            'security/detect-object-injection': 'error',
            'security/detect-non-literal-regexp': 'error',
            'security/detect-unsafe-regex': 'error',
            'security/detect-buffer-noassert': 'error',
            'security/detect-child-process': 'error',
            'security/detect-disable-mustache-escape': 'error',
            'security/detect-eval-with-expression': 'error',
            'security/detect-no-csrf-before-method-override': 'error',
            'security/detect-non-literal-fs-filename': 'error',
            'security/detect-non-literal-require': 'error',
            'security/detect-possible-timing-attacks': 'error',
            'security/detect-pseudoRandomBytes': 'error',
            'no-secrets/no-secrets': 'error'
          }
        };
        EOF
        
    - name: Run ESLint Security Scan
      run: |
        npx eslint analyzer/backend/static/*.js --format json --output-file eslint-report.json || true
        npx eslint analyzer/backend/static/*.js
      continue-on-error: true

  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Datenschutz'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --nvdApiKey ${{ secrets.NVD_API_KEY }}
          
    - name: Upload OWASP Dependency Check results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/dependency-check-report.sarif
      continue-on-error: true
