name: Deploy to Google Cloud Platform

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      region:
        description: 'GCP Region'
        required: true
        default: 'us-central1'
        type: choice
        options:
        - us-central1
        - us-east1
        - europe-west1
        - asia-southeast1
  release:
    types: [published]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ github.event.inputs.region || 'us-central1' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
  SERVICE_NAME: datenschutz-analyzer
  IMAGE_NAME: datenschutz-analyzer

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    name: Deploy to Google Cloud Run
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud as credential helper
      run: |
        gcloud auth configure-docker gcr.io

    - name: Build and push Docker image
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        IMAGE_URI="gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG"
        
        # Build the Docker image
        docker build -t $IMAGE_URI .
        
        # Push to Google Container Registry
        docker push $IMAGE_URI
        
        echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT

    - name: Deploy to Cloud Run
      id: deploy
      run: |
        SERVICE_URL=$(gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image=${{ steps.build-image.outputs.image-uri }} \
          --platform=managed \
          --region=${{ env.GCP_REGION }} \
          --allow-unauthenticated \
          --port=4001 \
          --memory=1Gi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=10 \
          --timeout=3600 \
          --concurrency=80 \
          --set-env-vars="PORT=4001,MODEL_BACKEND=${{ secrets.MODEL_BACKEND }},LOG_RETENTION_DAYS=30" \
          --set-secrets="HF_MODEL=hf-model:latest" \
          --format="value(status.url)")
        
        echo "service-url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "Service deployed at: $SERVICE_URL"

    - name: Set up Cloud SQL Proxy (if using Cloud SQL)
      if: env.ENVIRONMENT == 'production'
      run: |
        # Download Cloud SQL Proxy
        wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
        chmod +x cloud_sql_proxy
        
        # Start Cloud SQL Proxy in background
        ./cloud_sql_proxy -instances=${{ secrets.CLOUD_SQL_CONNECTION_NAME }}=tcp:5432 &

    - name: Run deployment verification
      run: |
        sleep 30  # Wait for service to start
        
        HEALTH_URL="${{ steps.deploy.outputs.service-url }}/health"
        echo "Testing health endpoint: $HEALTH_URL"
        
        # Test health endpoint with retries
        for i in {1..10}; do
          if curl -f "$HEALTH_URL"; then
            echo "✅ Deployment verification successful!"
            exit 0
          fi
          echo "Attempt $i failed, retrying in 15 seconds..."
          sleep 15
        done
        
        echo "❌ Deployment verification failed"
        exit 1

    - name: Update traffic allocation
      if: env.ENVIRONMENT == 'production'
      run: |
        # Gradually shift traffic to new revision
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --to-latest=100 \
          --region=${{ env.GCP_REGION }}

    - name: Set up monitoring
      run: |
        # Create uptime check
        gcloud alpha monitoring uptime create ${{ env.SERVICE_NAME }}-${{ env.ENVIRONMENT }} \
          --resource-type=url \
          --resource-url="${{ steps.deploy.outputs.service-url }}/health" \
          --check-interval=60s \
          --timeout=10s \
          --content-matchers='{"content": "ok"}' \
          --display-name="Datenschutz ${{ env.ENVIRONMENT }} Health Check" || true

  setup-infrastructure:
    name: Set up GCP Infrastructure
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Create Cloud SQL instance (if not exists)
      run: |
        if ! gcloud sql instances describe datenschutz-${{ env.ENVIRONMENT }} --project=${{ env.GCP_PROJECT_ID }} 2>/dev/null; then
          gcloud sql instances create datenschutz-${{ env.ENVIRONMENT }} \
            --database-version=POSTGRES_14 \
            --tier=db-f1-micro \
            --region=${{ env.GCP_REGION }} \
            --storage-size=10GB \
            --storage-type=SSD \
            --storage-auto-increase \
            --backup-start-time=03:00 \
            --maintenance-window-day=SUN \
            --maintenance-window-hour=04 \
            --project=${{ env.GCP_PROJECT_ID }}
        fi

    - name: Create database
      run: |
        gcloud sql databases create datenschutz \
          --instance=datenschutz-${{ env.ENVIRONMENT }} \
          --project=${{ env.GCP_PROJECT_ID }} || true

    - name: Set up Secret Manager secrets
      run: |
        # Create secrets if they don't exist
        echo "${{ secrets.HF_MODEL }}" | gcloud secrets create hf-model \
          --data-file=- --project=${{ env.GCP_PROJECT_ID }} || \
          echo "${{ secrets.HF_MODEL }}" | gcloud secrets versions add hf-model \
          --data-file=- --project=${{ env.GCP_PROJECT_ID }}

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, setup-infrastructure]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ Successfully deployed to GCP ${{ env.ENVIRONMENT }} environment!"
        
    - name: Notify failure
      if: needs.deploy.result == 'failure' || needs.setup-infrastructure.result == 'failure'
      run: |
        echo "❌ GCP deployment failed. Check the logs for details."
