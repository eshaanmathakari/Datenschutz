name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r analyzer/requirements.txt
        pip install pytest pytest-cov pytest-mock flake8 black isort mypy

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 analyzer/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 analyzer/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        black --check --diff analyzer/

    - name: Import sorting check with isort
      run: |
        isort --check-only --diff analyzer/

    - name: Type checking with mypy
      run: |
        mypy analyzer/ --ignore-missing-imports
      continue-on-error: true

    - name: Run unit tests
      run: |
        pytest analyzer/ -v --cov=analyzer --cov-report=xml --cov-report=term-missing
      continue-on-error: true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety semgrep

    - name: Run Bandit security scan
      run: |
        bandit -r analyzer/ -f json -o bandit-report.json || true
        bandit -r analyzer/

    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto analyzer/ --json --output=semgrep-report.json || true
        semgrep --config=auto analyzer/

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Output image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT

  vulnerability-scan:
    name: Container Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build.outputs.image }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start services with docker-compose
      run: |
        docker-compose -f docker-compose.yml up -d datenschutz-analyzer
        sleep 30

    - name: Wait for service to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4001/health; do sleep 5; done'

    - name: Run integration tests
      run: |
        # Test health endpoint
        curl -f http://localhost:4001/health
        
        # Test scan endpoint with sample data
        curl -X POST http://localhost:4001/scan \
          -H "Content-Type: application/json" \
          -d '{"path": "/app", "options": {"reasoning": "medium"}}' \
          | jq .

    - name: Stop services
      if: always()
      run: |
        docker-compose down

  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [test, security-scan, build, vulnerability-scan, integration-test]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "✅ All CI checks passed successfully!"
        
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "❌ CI pipeline failed. Check the logs for details."
        exit 1
