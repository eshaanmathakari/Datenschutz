version: '3.8'

services:
  datenschutz-analyzer:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: datenschutz-analyzer
    ports:
      - "4001:4001"
    environment:
      - PORT=4001
      - MODEL_BACKEND=${MODEL_BACKEND:-none}
      - MODEL_PATH=${MODEL_PATH:-}
      - HF_MODEL=${HF_MODEL:-}
      - HF_DEVICE_MAP=${HF_DEVICE_MAP:-auto}
      - HF_LOAD_IN_8BIT=${HF_LOAD_IN_8BIT:-true}
      - DEFAULT_SCAN_PATH=${DEFAULT_SCAN_PATH:-/app}
      - LOG_RETENTION_DAYS=${LOG_RETENTION_DAYS:-14}
      - LOG_DIR=/app/fix_logs
    volumes:
      - ./fix_logs:/app/fix_logs
      - ${SCAN_PATH:-./}:/scan:ro  # Mount local directory for scanning
    networks:
      - datenschutz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: datenschutz-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - datenschutz-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-datenschutz123}

  # Optional: PostgreSQL for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: datenschutz-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-datenschutz}
      - POSTGRES_USER=${POSTGRES_USER:-datenschutz}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-datenschutz123}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - datenschutz-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-datenschutz}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: datenschutz-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - datenschutz-network
    depends_on:
      - datenschutz-analyzer
    restart: unless-stopped

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local

networks:
  datenschutz-network:
    driver: bridge
